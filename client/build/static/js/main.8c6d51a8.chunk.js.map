{"version":3,"sources":["utils/actions.js","utils/queries.js","utils/helpers.js","assets/spinner.gif","components/ProductItem/index.js","components/ProductList/index.js","components/CategoryMenu/index.js","components/CartItem/index.js","utils/auth.js","components/Cart/index.js","pages/Home.js","pages/Detail.js","components/Jumbotron/index.js","pages/NoMatch.js","utils/mutations.js","pages/Login.js","pages/Signup.js","pages/Success.js","components/Nav/index.js","pages/OrderHistory.js","utils/reducers.js","utils/store.js","App.js","serviceWorker.js","index.js"],"names":["UPDATE_PRODUCTS","ADD_TO_CART","ADD_MULTIPLE_TO_CART","REMOVE_FROM_CART","UPDATE_CART_QUANTITY","TOGGLE_CART","UPDATE_CATEGORIES","UPDATE_CURRENT_CATEGORY","QUERY_PRODUCTS","gql","_templateObject","_taggedTemplateLiteral","QUERY_CHECKOUT","_templateObject2","QUERY_CATEGORIES","_templateObject3","_templateObject4","QUERY_USER","_templateObject5","pluralize","name","count","idbPromise","storeName","method","object","Promise","resolve","reject","db","tx","store","request","window","indexedDB","open","onupgradeneeded","e","result","createObjectStore","keyPath","onerror","console","log","onsuccess","transaction","objectStore","put","all","getAll","delete","_id","oncomplete","close","ProductItem","item","state","useSelector","dispatch","useDispatch","cart","image","price","quantity","_jsxs","className","children","Link","to","concat","_jsx","alt","src","onClick","itemInCart","find","cartItem","type","purchaseQuantity","parseInt","_objectSpread","product","ProductList","currentCategory","_useQuery","useQuery","loading","data","useEffect","products","forEach","then","length","filter","category","map","spinner","CategoryMenu","categories","categoryData","id","CartItem","_ref","placeholder","value","onChange","target","role","removeFromCart","AuthService","_classCallCheck","_createClass","key","decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","location","assign","removeItem","stripePromise","loadStripe","Cart","_useLazyQuery","useLazyQuery","_useLazyQuery2","_slicedToArray","getCheckout","toggleCart","_getCart","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","sent","_toConsumableArray","stop","apply","arguments","getCart","res","redirectToCheckout","sessionId","checkout","session","cartOpen","sum","toFixed","calculateTotal","Auth","loggedIn","productIds","i","push","variables","Home","Detail","useParams","_useState","useState","_useState2","currentProduct","setCurrentProduct","indexedProducts","_Fragment","description","disabled","p","Jumbotron","style","height","clear","paddingTop","textAlign","NoMatch","LOGIN","ADD_ORDER","ADD_USER","Login","props","email","password","formState","setFormState","_useMutation","useMutation","_useMutation2","login","error","handleFormSubmit","event","mutationResponse","preventDefault","t0","_x","handleChange","_event$target","_defineProperty","onSubmit","htmlFor","Signup","addUser","firstName","lastName","Success","addOrder","_saveOrder","_yield$addOrder","setTimeout","saveOrder","Nav","href","logout","OrderHistory","user","orders","order","purchaseDate","toLocaleDateString","index","initialState","reducer","undefined","action","newState","createStore","httpLink","createHttpLink","uri","authLink","setContext","_","headers","authorization","client","ApolloClient","link","cache","InMemoryCache","App","ApolloProvider","Router","Provider","Routes","Route","exact","path","element","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","ReactDOM","render","React","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.8c6d51a8.chunk.js","sourcesContent":["export const UPDATE_PRODUCTS = \"UPDATE_PRODUCTS\";\n\nexport const ADD_TO_CART = \"ADD_TO_CART\";\nexport const ADD_MULTIPLE_TO_CART = \"ADD_MULTIPLE_TO_CART\";\nexport const REMOVE_FROM_CART = \"REMOVE_FROM_CART\";\nexport const CLEAR_CART = \"CLEAR_CART\";\nexport const UPDATE_CART_QUANTITY = \"UPDATE_CART_QUANTITY\";\nexport const TOGGLE_CART = \"TOGGLE_CART\";\n\nexport const UPDATE_CATEGORIES = \"UPDATE_CATEGORIES\";\nexport const UPDATE_CURRENT_CATEGORY = \"UPDATE_CURRENT_CATEGORY\";\n","import { gql } from '@apollo/client';\n\nexport const QUERY_PRODUCTS = gql`\n  query getProducts($category: ID) {\n    products(category: $category) {\n      _id\n      name\n      description\n      price\n      quantity\n      image\n      category {\n        _id\n      }\n    }\n  }\n`;\n\nexport const QUERY_CHECKOUT = gql`\n  query getCheckout($products: [ID]!) {\n    checkout(products: $products) {\n      session\n    }\n  }\n`;\n\nexport const QUERY_ALL_PRODUCTS = gql`\n  {\n    products {\n      _id\n      name\n      description\n      price\n      quantity\n      category {\n        name\n      }\n    }\n  }\n`;\n\nexport const QUERY_CATEGORIES = gql`\n  {\n    categories {\n      _id\n      name\n    }\n  }\n`;\n\nexport const QUERY_USER = gql`\n  {\n    user {\n      firstName\n      lastName\n      orders {\n        _id\n        purchaseDate\n        products {\n          _id\n          name\n          description\n          price\n          quantity\n          image\n        }\n      }\n    }\n  }\n`;\n","export function pluralize(name, count) {\n  if (count === 1) {\n    return name;\n  }\n  return name + 's';\n}\n\nexport function idbPromise(storeName, method, object) {\n  return new Promise((resolve, reject) => {\n    const request = window.indexedDB.open('shop-shop', 1);\n    let db, tx, store;\n    request.onupgradeneeded = function(e) {\n      const db = request.result;\n      db.createObjectStore('products', { keyPath: '_id' });\n      db.createObjectStore('categories', { keyPath: '_id' });\n      db.createObjectStore('cart', { keyPath: '_id' });\n    };\n\n    request.onerror = function(e) {\n      console.log('There was an error');\n    };\n\n    request.onsuccess = function(e) {\n      db = request.result;\n      tx = db.transaction(storeName, 'readwrite');\n      store = tx.objectStore(storeName);\n\n      db.onerror = function(e) {\n        console.log('error', e);\n      };\n\n      switch (method) {\n        case 'put':\n          store.put(object);\n          resolve(object);\n          break;\n        case 'get':\n          const all = store.getAll();\n          all.onsuccess = function() {\n            resolve(all.result);\n          };\n          break;\n        case 'delete':\n          store.delete(object._id);\n          break;\n        default:\n          console.log('No valid method');\n          break;\n      }\n\n      tx.oncomplete = function() {\n        db.close();\n      };\n    };\n  });\n}\n","export default __webpack_public_path__ + \"static/media/spinner.7e729fec.gif\";","// import React from \"react\";\n// import { Link } from \"react-router-dom\";\n// import { pluralize } from \"../../utils/helpers\"\n// import { useStoreContext } from \"../../utils/GlobalState\";\n// import { ADD_TO_CART, UPDATE_CART_QUANTITY } from \"../../utils/actions\";\n// import { idbPromise } from \"../../utils/helpers\";\n\n// function ProductItem(item) {\n//   const [state, dispatch] = useStoreContext();\n\n//   const {\n//     image,\n//     name,\n//     _id,\n//     price,\n//     quantity\n//   } = item;\n\n//   const { cart } = state\n\n//   const addToCart = () => {\n//     const itemInCart = cart.find((cartItem) => cartItem._id === _id)\n//     if (itemInCart) {\n//       dispatch({\n//         type: UPDATE_CART_QUANTITY,\n//         _id: _id,\n//         purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n//       });\n//       idbPromise('cart', 'put', {\n//         ...itemInCart,\n//         purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n//       });\n//     } else {\n//       dispatch({\n//         type: ADD_TO_CART,\n//         product: { ...item, purchaseQuantity: 1 }\n//       });\n//       idbPromise('cart', 'put', { ...item, purchaseQuantity: 1 });\n//     }\n//   }\n\n//   return (\n//     <div className=\"card px-1 py-1\">\n//       <Link to={`/products/${_id}`}>\n//         <img\n//           alt={name}\n//           src={`/images/${image}`}\n//         />\n//         <p>{name}</p>\n//       </Link>\n//       <div>\n//         <div>{quantity} {pluralize(\"item\", quantity)} in stock</div>\n//         <span>${price}</span>\n//       </div>\n//       <button onClick={addToCart}>Add to cart</button>\n//     </div>\n//   );\n// }\n\n// export default ProductItem;\n\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { pluralize } from '../../utils/helpers';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { ADD_TO_CART, UPDATE_CART_QUANTITY } from '../../utils/actions';\nimport { idbPromise } from '../../utils/helpers';\nfunction ProductItem(item) {\n  const state = useSelector((state) => {\n    return state;\n  });\n\n  const dispatch = useDispatch();\n  const { cart } = state;\n\n  const addToCart = () => {\n    // find the cart item with the matching id\n    const itemInCart = cart.find((cartItem) => cartItem._id === _id);\n\n    // if there was a match, call UPDATE with a new purchase quantity\n    if (itemInCart) {\n      dispatch({\n        type: UPDATE_CART_QUANTITY,\n        _id: _id,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1,\n      });\n      idbPromise('cart', 'put', {\n        ...itemInCart,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1,\n      });\n    } else {\n      dispatch({\n        type: ADD_TO_CART,\n        product: { ...item, purchaseQuantity: 1 },\n      });\n      idbPromise('cart', 'put', { ...item, purchaseQuantity: 1 });\n    }\n  };\n  const { image, name, _id, price, quantity } = item;\n\n  return (\n    <div className=\"card px-1 py-1\">\n      <Link to={`/products/${_id}`}>\n        <img alt={name} src={`/images/${image}`} />\n        <p>{name}</p>\n      </Link>\n      <div>\n        <div>\n          {quantity} {pluralize('item', quantity)} in stock\n        </div>\n        <span>${price}</span>\n      </div>\n      <button onClick={addToCart}>Add to cart</button>\n    </div>\n  );\n}\n\nexport default ProductItem;","// import React, { useEffect } from 'react';\n// import ProductItem from '../ProductItem';\n// import { useStoreContext } from '../../utils/GlobalState';\n// import { UPDATE_PRODUCTS } from '../../utils/actions';\n// import { useQuery } from '@apollo/client';\n// import { QUERY_PRODUCTS } from '../../utils/queries';\n// import { idbPromise } from '../../utils/helpers';\n// import spinner from '../../assets/spinner.gif';\n\n// function ProductList() {\n//   const [state, dispatch] = useStoreContext();\n\n//   const { currentCategory } = state;\n\n//   const { loading, data } = useQuery(QUERY_PRODUCTS);\n\n//   useEffect(() => {\n//     if (data) {\n//       dispatch({\n//         type: UPDATE_PRODUCTS,\n//         products: data.products,\n//       });\n//       data.products.forEach((product) => {\n//         idbPromise('products', 'put', product);\n//       });\n//     } else if (!loading) {\n//       idbPromise('products', 'get').then((products) => {\n//         dispatch({\n//           type: UPDATE_PRODUCTS,\n//           products: products,\n//         });\n//       });\n//     }\n//   }, [data, loading, dispatch]);\n\n//   function filterProducts() {\n//     if (!currentCategory) {\n//       return state.products;\n//     }\n\n//     return state.products.filter(\n//       (product) => product.category._id === currentCategory\n//     );\n//   }\n\n//   return (\n//     <div className=\"my-2\">\n//       <h2>Our Products:</h2>\n//       {state.products.length ? (\n//         <div className=\"flex-row\">\n//           {filterProducts().map((product) => (\n//             <ProductItem\n//               key={product._id}\n//               _id={product._id}\n//               image={product.image}\n//               name={product.name}\n//               price={product.price}\n//               quantity={product.quantity}\n//             />\n//           ))}\n//         </div>\n//       ) : (\n//         <h3>You haven't added any products yet!</h3>\n//       )}\n//       {loading ? <img src={spinner} alt=\"loading\" /> : null}\n//     </div>\n//   );\n// }\n\n// export default ProductList;\n\nimport React, { useEffect } from 'react';\nimport { useQuery } from '@apollo/client';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { UPDATE_PRODUCTS } from '../../utils/actions';\nimport { QUERY_PRODUCTS } from '../../utils/queries';\nimport { idbPromise } from '../../utils/helpers';\nimport spinner from '../../assets/spinner.gif';\nimport ProductItem from '../ProductItem';\n\nfunction ProductList() {\n  const state = useSelector((state) => {\n    return state;\n  });\n  const dispatch = useDispatch();\n\n  const { currentCategory } = state;\n\n  const { loading, data } = useQuery(QUERY_PRODUCTS);\n\n  useEffect(() => {\n    // if there's data to be stored\n    if (data) {\n      // let's store it in the global state object\n      dispatch({\n        type: UPDATE_PRODUCTS,\n        products: data.products,\n      });\n\n      // but let's also take each product and save it to IndexedDB using the helper function\n      data.products.forEach((product) => {\n        idbPromise('products', 'put', product);\n      });\n      // add else if to check if `loading` is undefined in `useQuery()` Hook\n    } else if (!loading) {\n      // since we're offline, get all of the data from the `products` store\n      idbPromise('products', 'get').then((products) => {\n        // use retrieved data to set global state for offline browsing\n        dispatch({\n          type: UPDATE_PRODUCTS,\n          products: products,\n        });\n      });\n    }\n  }, [data, loading, dispatch]);\n\n  function filterProducts() {\n    if (!currentCategory) {\n      return state.products;\n    }\n\n    return state.products.filter(\n      (product) => product.category._id === currentCategory\n    );\n  }\n\n  return (\n    <div className=\"my-2\">\n      <h2>Our Products:</h2>\n      {state.products.length ? (\n        <div className=\"flex-row\">\n          {filterProducts().map((product) => (\n            <ProductItem\n              key={product._id}\n              _id={product._id}\n              image={product.image}\n              name={product.name}\n              price={product.price}\n              quantity={product.quantity}\n            />\n          ))}\n        </div>\n      ) : (\n        <h3>You haven't added any products yet!</h3>\n      )}\n      {loading ? <img src={spinner} alt=\"loading\" /> : null}\n    </div>\n  );\n}\n\nexport default ProductList;","// import React, { useEffect } from 'react';\n// import { useQuery } from '@apollo/client';\n// import { useStoreContext } from '../../utils/GlobalState';\n// import {\n//   UPDATE_CATEGORIES,\n//   UPDATE_CURRENT_CATEGORY,\n// } from '../../utils/actions';\n// import { QUERY_CATEGORIES } from '../../utils/queries';\n// import { idbPromise } from '../../utils/helpers';\n\n// function CategoryMenu() {\n//   const [state, dispatch] = useStoreContext();\n\n//   const { categories } = state;\n\n//   const { loading, data: categoryData } = useQuery(QUERY_CATEGORIES);\n\n//   useEffect(() => {\n//     if (categoryData) {\n//       dispatch({\n//         type: UPDATE_CATEGORIES,\n//         categories: categoryData.categories,\n//       });\n//       categoryData.categories.forEach((category) => {\n//         idbPromise('categories', 'put', category);\n//       });\n//     } else if (!loading) {\n//       idbPromise('categories', 'get').then((categories) => {\n//         dispatch({\n//           type: UPDATE_CATEGORIES,\n//           categories: categories,\n//         });\n//       });\n//     }\n//   }, [categoryData, loading, dispatch]);\n\n//   const handleClick = (id) => {\n//     dispatch({\n//       type: UPDATE_CURRENT_CATEGORY,\n//       currentCategory: id,\n//     });\n//   };\n\n//   return (\n//     <div>\n//       <h2>Choose a Category:</h2>\n//       {categories.map((item) => (\n//         <button\n//           key={item._id}\n//           onClick={() => {\n//             handleClick(item._id);\n//           }}\n//         >\n//           {item.name}\n//         </button>\n//       ))}\n//     </div>\n//   );\n// }\n\n// export default CategoryMenu;\n\nimport React, { useEffect } from 'react';\nimport { useQuery } from '@apollo/client';\nimport { QUERY_CATEGORIES } from '../../utils/queries';\nimport { idbPromise } from '../../utils/helpers';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n  UPDATE_CATEGORIES,\n  UPDATE_CURRENT_CATEGORY,\n} from '../../utils/actions';\n\nfunction CategoryMenu() {\n  const state = useSelector((state) => {\n    return state;\n  });\n\n  const dispatch = useDispatch();\n\n  const { categories } = state;\n\n  const { loading, data: categoryData } = useQuery(QUERY_CATEGORIES);\n\n  useEffect(() => {\n    // if categoryData exists or has changed from the response of useQuery, then run dispatch()\n    if (categoryData) {\n      // execute our dispatch function with our action object indicating the type of action and the data to set our state for categories to\n      dispatch({\n        type: UPDATE_CATEGORIES,\n        categories: categoryData.categories,\n      });\n      categoryData.categories.forEach((category) => {\n        idbPromise('categories', 'put', category);\n      });\n    } else if (!loading) {\n      idbPromise('categories', 'get').then((categories) => {\n        dispatch({\n          type: UPDATE_CATEGORIES,\n          categories: categories,\n        });\n      });\n    }\n  }, [categoryData, loading, dispatch]);\n\n  const handleClick = (id) => {\n    dispatch({\n      type: UPDATE_CURRENT_CATEGORY,\n      currentCategory: id,\n    });\n  };\n\n  return (\n    <div>\n      <h2>Choose a Category:</h2>\n      {categories.map((item) => (\n        <button\n          key={item._id}\n          onClick={() => {\n            handleClick(item._id);\n          }}\n        >\n          {item.name}\n        </button>\n      ))}\n    </div>\n  );\n}\n\nexport default CategoryMenu;","// import React from 'react';\n// import { useStoreContext } from \"../../utils/GlobalState\";\n// import { REMOVE_FROM_CART, UPDATE_CART_QUANTITY } from \"../../utils/actions\";\n// import { idbPromise } from \"../../utils/helpers\";\n\n// const CartItem = ({ item }) => {\n\n//   const [, dispatch] = useStoreContext();\n\n//   const removeFromCart = item => {\n//     dispatch({\n//       type: REMOVE_FROM_CART,\n//       _id: item._id\n//     });\n//     idbPromise('cart', 'delete', { ...item });\n\n//   };\n\n//   const onChange = (e) => {\n//     const value = e.target.value;\n//     if (value === '0') {\n//       dispatch({\n//         type: REMOVE_FROM_CART,\n//         _id: item._id\n//       });\n//       idbPromise('cart', 'delete', { ...item });\n\n//     } else {\n//       dispatch({\n//         type: UPDATE_CART_QUANTITY,\n//         _id: item._id,\n//         purchaseQuantity: parseInt(value)\n//       });\n//       idbPromise('cart', 'put', { ...item, purchaseQuantity: parseInt(value) });\n\n//     }\n//   }\n\n//   return (\n//     <div className=\"flex-row\">\n//       <div>\n//         <img\n//           src={`/images/${item.image}`}\n//           alt=\"\"\n//         />\n//       </div>\n//       <div>\n//         <div>{item.name}, ${item.price}</div>\n//         <div>\n//           <span>Qty:</span>\n//           <input\n//             type=\"number\"\n//             placeholder=\"1\"\n//             value={item.purchaseQuantity}\n//             onChange={onChange}\n//           />\n//           <span\n//             role=\"img\"\n//             aria-label=\"trash\"\n//             onClick={() => removeFromCart(item)}\n//           >\n//             🗑️\n//           </span>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default CartItem;\n\nimport React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { REMOVE_FROM_CART, UPDATE_CART_QUANTITY } from '../../utils/actions';\nimport { idbPromise } from '../../utils/helpers';\n\nconst CartItem = ({ item }) => {\n  const state = useSelector((state) => {\n    return state;\n  });\n\n  const dispatch = useDispatch();\n\n  const removeFromCart = (item) => {\n    dispatch({\n      type: REMOVE_FROM_CART,\n      _id: item._id,\n    });\n    idbPromise('cart', 'delete', { ...item });\n  };\n\n  const onChange = (e) => {\n    const value = e.target.value;\n    if (value === '0') {\n      dispatch({\n        type: REMOVE_FROM_CART,\n        _id: item._id,\n      });\n\n      idbPromise('cart', 'delete', { ...item });\n    } else {\n      dispatch({\n        type: UPDATE_CART_QUANTITY,\n        _id: item._id,\n        purchaseQuantity: parseInt(value),\n      });\n      idbPromise('cart', 'put', { ...item, purchaseQuantity: parseInt(value) });\n    }\n  };\n\n  return (\n    <div className=\"flex-row\">\n      <div>\n        <img src={`/images/${item.image}`} alt=\"\" />\n      </div>\n      <div>\n        <div>\n          {item.name}, ${item.price}\n        </div>\n        <div>\n          <span>Qty:</span>\n          <input\n            type=\"number\"\n            placeholder=\"1\"\n            value={item.purchaseQuantity}\n            onChange={onChange}\n          />\n          <span\n            role=\"img\"\n            aria-label=\"trash\"\n            onClick={() => removeFromCart(item)}\n          >\n            🗑️\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default CartItem;","import decode from 'jwt-decode';\n\nclass AuthService {\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken();\n    return !!token && !this.isTokenExpired(token);\n  }\n\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem('id_token');\n  }\n\n  login(idToken) {\n    // Saves user token to localStorage\n    localStorage.setItem('id_token', idToken);\n\n    window.location.assign('/');\n  }\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem('id_token');\n    // this will reload the page and reset the state of the application\n    window.location.assign('/');\n  }\n}\n\nexport default new AuthService();\n","// import React, { useEffect } from 'react';\n// import { loadStripe } from '@stripe/stripe-js';\n// import { useLazyQuery } from '@apollo/client';\n// import { QUERY_CHECKOUT } from '../../utils/queries';\n// import { idbPromise } from '../../utils/helpers';\n// import CartItem from '../CartItem';\n// import Auth from '../../utils/auth';\n// import { useStoreContext } from '../../utils/GlobalState';\n// import { TOGGLE_CART, ADD_MULTIPLE_TO_CART } from '../../utils/actions';\n// import './style.css';\n\n// const stripePromise = loadStripe('pk_test_TYooMQauvdEDq54NiTphI7jx');\n\n// const Cart = () => {\n//   const [state, dispatch] = useStoreContext();\n//   const [getCheckout, { data }] = useLazyQuery(QUERY_CHECKOUT);\n\n//   useEffect(() => {\n//     if (data) {\n//       stripePromise.then((res) => {\n//         res.redirectToCheckout({ sessionId: data.checkout.session });\n//       });\n//     }\n//   }, [data]);\n\n//   useEffect(() => {\n//     async function getCart() {\n//       const cart = await idbPromise('cart', 'get');\n//       dispatch({ type: ADD_MULTIPLE_TO_CART, products: [...cart] });\n//     }\n\n//     if (!state.cart.length) {\n//       getCart();\n//     }\n//   }, [state.cart.length, dispatch]);\n\n//   function toggleCart() {\n//     dispatch({ type: TOGGLE_CART });\n//   }\n\n//   function calculateTotal() {\n//     let sum = 0;\n//     state.cart.forEach((item) => {\n//       sum += item.price * item.purchaseQuantity;\n//     });\n//     return sum.toFixed(2);\n//   }\n\n//   function submitCheckout() {\n//     const productIds = [];\n\n//     state.cart.forEach((item) => {\n//       for (let i = 0; i < item.purchaseQuantity; i++) {\n//         productIds.push(item._id);\n//       }\n//     });\n\n//     getCheckout({\n//       variables: { products: productIds },\n//     });\n//   }\n\n//   if (!state.cartOpen) {\n//     return (\n//       <div className=\"cart-closed\" onClick={toggleCart}>\n//         <span role=\"img\" aria-label=\"trash\">\n//           🛒\n//         </span>\n//       </div>\n//     );\n//   }\n\n//   return (\n//     <div className=\"cart\">\n//       <div className=\"close\" onClick={toggleCart}>\n//         [close]\n//       </div>\n//       <h2>Shopping Cart</h2>\n//       {state.cart.length ? (\n//         <div>\n//           {state.cart.map((item) => (\n//             <CartItem key={item._id} item={item} />\n//           ))}\n\n//           <div className=\"flex-row space-between\">\n//             <strong>Total: ${calculateTotal()}</strong>\n\n//             {Auth.loggedIn() ? (\n//               <button onClick={submitCheckout}>Checkout</button>\n//             ) : (\n//               <span>(log in to check out)</span>\n//             )}\n//           </div>\n//         </div>\n//       ) : (\n//         <h3>\n//           <span role=\"img\" aria-label=\"shocked\">\n//             😱\n//           </span>\n//           You haven't added anything to your cart yet!\n//         </h3>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default Cart;\nimport React, { useEffect } from 'react';\nimport CartItem from '../CartItem';\nimport Auth from '../../utils/auth';\nimport { TOGGLE_CART, ADD_MULTIPLE_TO_CART } from '../../utils/actions';\nimport { idbPromise } from '../../utils/helpers';\nimport { QUERY_CHECKOUT } from '../../utils/queries';\nimport { useLazyQuery } from '@apollo/client';\nimport { loadStripe } from '@stripe/stripe-js';\nimport { useSelector, useDispatch } from 'react-redux';\nimport './style.css';\n\nconst stripePromise = loadStripe('pk_test_TYooMQauvdEDq54NiTphI7jx');\n\nconst Cart = () => {\n  const state = useSelector((state) => {\n    return state;\n  });\n\n  const dispatch = useDispatch();\n  const [getCheckout, { data }] = useLazyQuery(QUERY_CHECKOUT);\n\n  useEffect(() => {\n    async function getCart() {\n      const cart = await idbPromise('cart', 'get');\n      dispatch({ type: ADD_MULTIPLE_TO_CART, products: [...cart] });\n    }\n\n    if (!state.cart.length) {\n      getCart();\n    }\n  }, [state.cart.length, dispatch]);\n\n  useEffect(() => {\n    if (data) {\n      stripePromise.then((res) => {\n        res.redirectToCheckout({ sessionId: data.checkout.session });\n      });\n    }\n  }, [data]);\n\n  function toggleCart() {\n    dispatch({ type: TOGGLE_CART });\n  }\n\n  function calculateTotal() {\n    let sum = 0;\n    state.cart.forEach((item) => {\n      sum += item.price * item.purchaseQuantity;\n    });\n    return sum.toFixed(2);\n  }\n\n  function submitCheckout() {\n    const productIds = [];\n\n    state.cart.forEach((item) => {\n      for (let i = 0; i < item.purchaseQuantity; i++) {\n        productIds.push(item._id);\n      }\n    });\n    getCheckout({\n      variables: { products: productIds },\n    });\n  }\n\n  if (!state.cartOpen) {\n    return (\n      <div className=\"cart-closed\" onClick={toggleCart}>\n        <span role=\"img\" aria-label=\"trash\">\n          🛒\n        </span>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"cart\">\n      <div className=\"close\" onClick={toggleCart}>\n        [close]\n      </div>\n      <h2>Shopping Cart</h2>\n      {state.cart.length ? (\n        <div>\n          {state.cart.map((item) => (\n            <CartItem key={item._id} item={item} />\n          ))}\n\n          <div className=\"flex-row space-between\">\n            <strong>Total: ${calculateTotal()}</strong>\n\n            {Auth.loggedIn() ? (\n              <button onClick={submitCheckout}>Checkout</button>\n            ) : (\n              <span>(log in to check out)</span>\n            )}\n          </div>\n        </div>\n      ) : (\n        <h3>\n          <span role=\"img\" aria-label=\"shocked\">\n            😱\n          </span>\n          You haven't added anything to your cart yet!\n        </h3>\n      )}\n    </div>\n  );\n};\n\nexport default Cart;","import React from \"react\";\nimport ProductList from \"../components/ProductList\";\nimport CategoryMenu from \"../components/CategoryMenu\";\nimport Cart from \"../components/Cart\";\n\nconst Home = () => {\n  return (\n    <div className=\"container\">\n      <CategoryMenu />\n      <ProductList />\n      <Cart />\n    </div>\n  );\n};\n\nexport default Home;\n","// import React, { useEffect, useState } from 'react';\n// import { Link, useParams } from 'react-router-dom';\n// import { useQuery } from '@apollo/client';\n\n// import Cart from '../components/Cart';\n// import { useStoreContext } from '../utils/GlobalState';\n// import {\n//   REMOVE_FROM_CART,\n//   UPDATE_CART_QUANTITY,\n//   ADD_TO_CART,\n//   UPDATE_PRODUCTS,\n// } from '../utils/actions';\n// import { QUERY_PRODUCTS } from '../utils/queries';\n// import { idbPromise } from '../utils/helpers';\n// import spinner from '../assets/spinner.gif';\n\n// function Detail() {\n//   const [state, dispatch] = useStoreContext();\n//   const { id } = useParams();\n\n//   const [currentProduct, setCurrentProduct] = useState({});\n\n//   const { loading, data } = useQuery(QUERY_PRODUCTS);\n\n//   const { products, cart } = state;\n\n//   useEffect(() => {\n//     // already in global store\n//     if (products.length) {\n//       setCurrentProduct(products.find((product) => product._id === id));\n//     }\n//     // retrieved from server\n//     else if (data) {\n//       dispatch({\n//         type: UPDATE_PRODUCTS,\n//         products: data.products,\n//       });\n\n//       data.products.forEach((product) => {\n//         idbPromise('products', 'put', product);\n//       });\n//     }\n//     // get cache from idb\n//     else if (!loading) {\n//       idbPromise('products', 'get').then((indexedProducts) => {\n//         dispatch({\n//           type: UPDATE_PRODUCTS,\n//           products: indexedProducts,\n//         });\n//       });\n//     }\n//   }, [products, data, loading, dispatch, id]);\n\n//   const addToCart = () => {\n//     const itemInCart = cart.find((cartItem) => cartItem._id === id);\n//     if (itemInCart) {\n//       dispatch({\n//         type: UPDATE_CART_QUANTITY,\n//         _id: id,\n//         purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1,\n//       });\n//       idbPromise('cart', 'put', {\n//         ...itemInCart,\n//         purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1,\n//       });\n//     } else {\n//       dispatch({\n//         type: ADD_TO_CART,\n//         product: { ...currentProduct, purchaseQuantity: 1 },\n//       });\n//       idbPromise('cart', 'put', { ...currentProduct, purchaseQuantity: 1 });\n//     }\n//   };\n\n//   const removeFromCart = () => {\n//     dispatch({\n//       type: REMOVE_FROM_CART,\n//       _id: currentProduct._id,\n//     });\n\n//     idbPromise('cart', 'delete', { ...currentProduct });\n//   };\n\n//   return (\n//     <>\n//       {currentProduct && cart ? (\n//         <div className=\"container my-1\">\n//           <Link to=\"/\">← Back to Products</Link>\n\n//           <h2>{currentProduct.name}</h2>\n\n//           <p>{currentProduct.description}</p>\n\n//           <p>\n//             <strong>Price:</strong>${currentProduct.price}{' '}\n//             <button onClick={addToCart}>Add to Cart</button>\n//             <button\n//               disabled={!cart.find((p) => p._id === currentProduct._id)}\n//               onClick={removeFromCart}\n//             >\n//               Remove from Cart\n//             </button>\n//           </p>\n\n//           <img\n//             src={`/images/${currentProduct.image}`}\n//             alt={currentProduct.name}\n//           />\n//         </div>\n//       ) : null}\n//       {loading ? <img src={spinner} alt=\"loading\" /> : null}\n//       <Cart />\n//     </>\n//   );\n// }\n\n// export default Detail;\nimport React, { useEffect, useState } from 'react';\nimport { Link, useParams } from 'react-router-dom';\nimport { useQuery } from '@apollo/client';\nimport { idbPromise } from '../utils/helpers';\nimport Cart from '../components/Cart';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n  REMOVE_FROM_CART,\n  UPDATE_CART_QUANTITY,\n  ADD_TO_CART,\n  UPDATE_PRODUCTS,\n} from '../utils/actions';\nimport { QUERY_PRODUCTS } from '../utils/queries';\nimport spinner from '../assets/spinner.gif';\n\nfunction Detail() {\n  const state = useSelector((state) => {\n    return state;\n  });\n  const { id } = useParams();\n\n  const [currentProduct, setCurrentProduct] = useState({});\n  const dispatch = useDispatch();\n  const { loading, data } = useQuery(QUERY_PRODUCTS);\n\n  const { products, cart } = state;\n\n  useEffect(() => {\n    // already in global store\n    if (products.length) {\n      setCurrentProduct(products.find((product) => product._id === id));\n    }\n    // retrieved from server\n    else if (data) {\n      dispatch({\n        type: UPDATE_PRODUCTS,\n        products: data.products,\n      });\n\n      data.products.forEach((product) => {\n        idbPromise('products', 'put', product);\n      });\n    }\n    // get cache from idb\n    else if (!loading) {\n      idbPromise('products', 'get').then((indexedProducts) => {\n        dispatch({\n          type: UPDATE_PRODUCTS,\n          products: indexedProducts,\n        });\n      });\n    }\n  }, [products, data, loading, dispatch, id]);\n\n  const addToCart = () => {\n    const itemInCart = cart.find((cartItem) => cartItem._id === id);\n    if (itemInCart) {\n      dispatch({\n        type: UPDATE_CART_QUANTITY,\n        _id: id,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1,\n      });\n      // if we're updating quantity, use existing item data and increment purchaseQuantity value by one\n      idbPromise('cart', 'put', {\n        ...itemInCart,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1,\n      });\n    } else {\n      dispatch({\n        type: ADD_TO_CART,\n        product: { ...currentProduct, purchaseQuantity: 1 },\n      });\n      // if product isn't in the cart yet, add it to the current shopping cart in IndexedDB\n      idbPromise('cart', 'put', { ...currentProduct, purchaseQuantity: 1 });\n    }\n  };\n\n  const removeFromCart = () => {\n    dispatch({\n      type: REMOVE_FROM_CART,\n      _id: currentProduct._id,\n    });\n\n    // upon removal from cart, delete the item from IndexedDB using the `currentProduct._id` to locate what to remove\n    idbPromise('cart', 'delete', { ...currentProduct });\n  };\n\n  return (\n    <>\n      {currentProduct && cart ? (\n        <div className=\"container my-1\">\n          <Link to=\"/\">← Back to Products</Link>\n\n          <h2>{currentProduct.name}</h2>\n\n          <p>{currentProduct.description}</p>\n\n          <p>\n            <strong>Price:</strong>${currentProduct.price}{' '}\n            <button onClick={addToCart}>Add to Cart</button>\n            <button\n              disabled={!cart.find((p) => p._id === currentProduct._id)}\n              onClick={removeFromCart}\n            >\n              Remove from Cart\n            </button>\n          </p>\n\n          <img\n            src={`/images/${currentProduct.image}`}\n            alt={currentProduct.name}\n          />\n        </div>\n      ) : null}\n      {loading ? <img src={spinner} alt=\"loading\" /> : null}\n      <Cart />\n    </>\n  );\n}\n\nexport default Detail;","import React from \"react\";\n\nfunction Jumbotron({ children }) {\n  return (\n    <div\n      style={{ height: 560, clear: \"both\", paddingTop: 120, textAlign: \"center\" }}\n    >\n      {children}\n    </div>\n  );\n}\n\nexport default Jumbotron;\n","import React from \"react\";\nimport Jumbotron from \"../components/Jumbotron\";\n\nconst NoMatch = () => {\n  return (\n    <div>\n      <Jumbotron>\n        <h1>404 Page Not Found</h1>\n        <h1>\n          <span role=\"img\" aria-label=\"Face With Rolling Eyes Emoji\">\n            🙄\n          </span>\n        </h1>\n      </Jumbotron>\n    </div>\n  );\n};\n\nexport default NoMatch;\n","import { gql } from '@apollo/client';\n\nexport const LOGIN = gql`\n  mutation login($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      token\n      user {\n        _id\n      }\n    }\n  }\n`;\n\nexport const ADD_ORDER = gql`\n  mutation addOrder($products: [ID]!) {\n    addOrder(products: $products) {\n      purchaseDate\n      products {\n        _id\n        name\n        description\n        price\n        quantity\n        category {\n          name\n        }\n      }\n    }\n  }\n`;\n\nexport const ADD_USER = gql`\n  mutation addUser(\n    $firstName: String!\n    $lastName: String!\n    $email: String!\n    $password: String!\n  ) {\n    addUser(\n      firstName: $firstName\n      lastName: $lastName\n      email: $email\n      password: $password\n    ) {\n      token\n      user {\n        _id\n      }\n    }\n  }\n`;\n","import React, { useState } from 'react';\nimport { useMutation } from '@apollo/client';\nimport { Link } from 'react-router-dom';\nimport { LOGIN } from '../utils/mutations';\nimport Auth from '../utils/auth';\n\nfunction Login(props) {\n  const [formState, setFormState] = useState({ email: '', password: '' });\n  const [login, { error }] = useMutation(LOGIN);\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    try {\n      const mutationResponse = await login({\n        variables: { email: formState.email, password: formState.password },\n      });\n      const token = mutationResponse.data.login.token;\n      Auth.login(token);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\n  return (\n    <div className=\"container my-1\">\n      <Link to=\"/signup\">← Go to Signup</Link>\n\n      <h2>Login</h2>\n      <form onSubmit={handleFormSubmit}>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"email\">Email address:</label>\n          <input\n            placeholder=\"youremail@test.com\"\n            name=\"email\"\n            type=\"email\"\n            id=\"email\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"pwd\">Password:</label>\n          <input\n            placeholder=\"******\"\n            name=\"password\"\n            type=\"password\"\n            id=\"pwd\"\n            onChange={handleChange}\n          />\n        </div>\n        {error ? (\n          <div>\n            <p className=\"error-text\">The provided credentials are incorrect</p>\n          </div>\n        ) : null}\n        <div className=\"flex-row flex-end\">\n          <button type=\"submit\">Submit</button>\n        </div>\n      </form>\n    </div>\n  );\n}\n\nexport default Login;\n","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { useMutation } from '@apollo/client';\nimport Auth from '../utils/auth';\nimport { ADD_USER } from '../utils/mutations';\n\nfunction Signup(props) {\n  const [formState, setFormState] = useState({ email: '', password: '' });\n  const [addUser] = useMutation(ADD_USER);\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    const mutationResponse = await addUser({\n      variables: {\n        email: formState.email,\n        password: formState.password,\n        firstName: formState.firstName,\n        lastName: formState.lastName,\n      },\n    });\n    const token = mutationResponse.data.addUser.token;\n    Auth.login(token);\n  };\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\n  return (\n    <div className=\"container my-1\">\n      <Link to=\"/login\">← Go to Login</Link>\n\n      <h2>Signup</h2>\n      <form onSubmit={handleFormSubmit}>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"firstName\">First Name:</label>\n          <input\n            placeholder=\"First\"\n            name=\"firstName\"\n            type=\"firstName\"\n            id=\"firstName\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"lastName\">Last Name:</label>\n          <input\n            placeholder=\"Last\"\n            name=\"lastName\"\n            type=\"lastName\"\n            id=\"lastName\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"email\">Email:</label>\n          <input\n            placeholder=\"youremail@test.com\"\n            name=\"email\"\n            type=\"email\"\n            id=\"email\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"pwd\">Password:</label>\n          <input\n            placeholder=\"******\"\n            name=\"password\"\n            type=\"password\"\n            id=\"pwd\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row flex-end\">\n          <button type=\"submit\">Submit</button>\n        </div>\n      </form>\n    </div>\n  );\n}\n\nexport default Signup;\n","import React, { useEffect } from 'react';\nimport { useMutation } from '@apollo/client';\nimport Jumbotron from '../components/Jumbotron';\nimport { ADD_ORDER } from '../utils/mutations';\nimport { idbPromise } from '../utils/helpers';\n\nfunction Success() {\n  const [addOrder] = useMutation(ADD_ORDER);\n\n  useEffect(() => {\n    async function saveOrder() {\n      const cart = await idbPromise('cart', 'get');\n      const products = cart.map((item) => item._id);\n\n      if (products.length) {\n        const { data } = await addOrder({ variables: { products } });\n        const productData = data.addOrder.products;\n\n        productData.forEach((item) => {\n          idbPromise('cart', 'delete', item);\n        });\n      }\n\n      setTimeout(() => {\n        window.location.assign('/');\n      }, 3000);\n    }\n\n    saveOrder();\n  }, [addOrder]);\n\n  return (\n    <div>\n      <Jumbotron>\n        <h1>Success!</h1>\n        <h2>Thank you for your purchase!</h2>\n        <h2>You will now be redirected to the home page</h2>\n      </Jumbotron>\n    </div>\n  );\n}\n\nexport default Success;\n","import React from \"react\";\nimport Auth from \"../../utils/auth\";\nimport { Link } from \"react-router-dom\";\n\nfunction Nav() {\n\n  function showNavigation() {\n    if (Auth.loggedIn()) {\n      return (\n        <ul className=\"flex-row\">\n          <li className=\"mx-1\">\n            <Link to=\"/orderHistory\">\n              Order History\n            </Link>\n          </li>\n          <li className=\"mx-1\">\n            {/* this is not using the Link component to logout or user and then refresh the application to the start */}\n            <a href=\"/\" onClick={() => Auth.logout()}>\n              Logout\n            </a>\n          </li>\n        </ul>\n      );\n    } else {\n      return (\n        <ul className=\"flex-row\">\n          <li className=\"mx-1\">\n            <Link to=\"/signup\">\n              Signup\n            </Link>\n          </li>\n          <li className=\"mx-1\">\n            <Link to=\"/login\">\n              Login\n            </Link>\n          </li>\n        </ul>\n      );\n    }\n  }\n\n  return (\n    <header className=\"flex-row px-1\">\n      <h1>\n        <Link to=\"/\">\n          <span role=\"img\" aria-label=\"shopping bag\">🛍️</span>\n          -Shop-Shop\n        </Link>\n      </h1>\n\n      <nav>\n        {showNavigation()}\n      </nav>\n    </header>\n  );\n}\n\nexport default Nav;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { useQuery } from '@apollo/client';\nimport { QUERY_USER } from '../utils/queries';\n\nfunction OrderHistory() {\n  const { data } = useQuery(QUERY_USER);\n  let user;\n\n  if (data) {\n    user = data.user;\n  }\n\n  return (\n    <>\n      <div className=\"container my-1\">\n        <Link to=\"/\">← Back to Products</Link>\n\n        {user ? (\n          <>\n            <h2>\n              Order History for {user.firstName} {user.lastName}\n            </h2>\n            {user.orders.map((order) => (\n              <div key={order._id} className=\"my-2\">\n                <h3>\n                  {new Date(parseInt(order.purchaseDate)).toLocaleDateString()}\n                </h3>\n                <div className=\"flex-row\">\n                  {order.products.map(({ _id, image, name, price }, index) => (\n                    <div key={index} className=\"card px-1 py-1\">\n                      <Link to={`/products/${_id}`}>\n                        <img alt={name} src={`/images/${image}`} />\n                        <p>{name}</p>\n                      </Link>\n                      <div>\n                        <span>${price}</span>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            ))}\n          </>\n        ) : null}\n      </div>\n    </>\n  );\n}\n\nexport default OrderHistory;\n","// import { useReducer } from 'react';\n// import {\n//   UPDATE_PRODUCTS,\n//   ADD_TO_CART,\n//   UPDATE_CART_QUANTITY,\n//   REMOVE_FROM_CART,\n//   ADD_MULTIPLE_TO_CART,\n//   UPDATE_CATEGORIES,\n//   UPDATE_CURRENT_CATEGORY,\n//   CLEAR_CART,\n//   TOGGLE_CART,\n// } from './actions';\n\n// // TODO: To get a better understand of how a reducer works - add comments to the various actions in the reducer\n// export const reducer = (state, action) => {\n//   switch (action.type) {\n//     // TODO: Add a comment describing the functionality of the UPDATE_PRODUCTS case\n//     // Your comment here\n//     case UPDATE_PRODUCTS:\n//       return {\n//         ...state,\n//         products: [...action.products],\n//       };\n\n//     case ADD_TO_CART:\n//       return {\n//         ...state,\n//         cartOpen: true,\n//         cart: [...state.cart, action.product],\n//       };\n\n//     case ADD_MULTIPLE_TO_CART:\n//       return {\n//         ...state,\n//         cart: [...state.cart, ...action.products],\n//       };\n//     // TODO: Add a comment describing the functionality of the UPDATE_CART_QUANTITY case\n//     // Your comment here\n//     case UPDATE_CART_QUANTITY:\n//       return {\n//         ...state,\n//         cartOpen: true,\n//         cart: state.cart.map((product) => {\n//           if (action._id === product._id) {\n//             product.purchaseQuantity = action.purchaseQuantity;\n//           }\n//           return product;\n//         }),\n//       };\n\n//     // TODO: Add a comment describing the functionality of the REMOVE_FROM_CART case\n//     // Your comment here\n//     case REMOVE_FROM_CART:\n//       let newState = state.cart.filter((product) => {\n//         return product._id !== action._id;\n//       });\n\n//       return {\n//         ...state,\n//         cartOpen: newState.length > 0,\n//         cart: newState,\n//       };\n\n//     case CLEAR_CART:\n//       return {\n//         ...state,\n//         cartOpen: false,\n//         cart: [],\n//       };\n\n//     case TOGGLE_CART:\n//       return {\n//         ...state,\n//         cartOpen: !state.cartOpen,\n//       };\n\n//     case UPDATE_CATEGORIES:\n//       return {\n//         ...state,\n//         categories: [...action.categories],\n//       };\n\n//     case UPDATE_CURRENT_CATEGORY:\n//       return {\n//         ...state,\n//         currentCategory: action.currentCategory,\n//       };\n\n//     // TODO: Add a comment describing what the default case is for\n//     // Your comment here\n//     default:\n//       return state;\n//   }\n// };\n\n// export function useProductReducer(initialState) {\n//   return useReducer(reducer, initialState);\n// }\nimport {\n  UPDATE_PRODUCTS,\n  ADD_TO_CART,\n  UPDATE_CART_QUANTITY,\n  REMOVE_FROM_CART,\n  ADD_MULTIPLE_TO_CART,\n  UPDATE_CATEGORIES,\n  UPDATE_CURRENT_CATEGORY,\n  CLEAR_CART,\n  TOGGLE_CART,\n} from './actions';\n\nconst initialState = {\n  products: [],\n  cart: [],\n  cartOpen: false,\n  categories: [],\n  currentCategory: '',\n};\nexport const reducer = (state = initialState, action) => {\n  switch (action.type) {\n    // TODO: Add a comment describing the functionality of the UPDATE_PRODUCTS case\n    // If the reducer action type is UPDATE_PRODUCTS it will update the products from the array of products in iterable way.\n    // I mean if we add one product into the products array the old products array becomes the updated data(old products array plus the new product).\n    // the same logic is true if we delete one product from the products array, the old products array will have the new updated data. just without the deleted one! \n    case UPDATE_PRODUCTS:\n      return {\n        // Copy the whole state\n\n        ...state,\n        products: [...action.products],\n      };\n\n    // If the reducer action type is ADD_TO_CART it will add one product item into the cart.\n\n    case ADD_TO_CART:\n      return {\n        // Copy the whole state\n\n        ...state,\n        cartOpen: true,\n        cart: [...state.cart, action.product],\n      };\n\n    // If the reducer action type is ADD_MULTIPLE_TO_CART it will add multiple product item into the cart.\n\n    case ADD_MULTIPLE_TO_CART:\n      return {\n        // Copy the whole state\n\n        ...state,\n        cart: [...state.cart, ...action.products],\n      };\n    // TODO: Add a comment describing the functionality of the UPDATE_CART_QUANTITY case\n    // If the reducer action type is UPDATE_CART_QUANTITY it will update the product item quantity.\n    // the map method maps all products from the state and assign the value of action.purchaseQuantity into product.purchaseQuantity if and only if\n    // action._id is exactly equal to product._id and finally update the cart.  \n    case UPDATE_CART_QUANTITY:\n      return {\n        // Copy the whole state\n        ...state,\n        // assign cartOpen value to be true\n        cartOpen: true,\n        cart: state.cart.map((product) => {\n          // check if action._id is exactly equal to product._id\n          if (action._id === product._id) {\n            // assign the value of action.purchaseQuantity into product.purchaseQuantity\n            product.purchaseQuantity = action.purchaseQuantity;\n          }\n          return product;\n        }),\n      };\n    // TODO: Add a comment describing the functionality of the REMOVE_FROM_CART case\n    // If the reducer action type is REMOVE_FROM_CART it will remove the product item from the cart using filter method.\n    // the filter method filters all products from the cart with out the product item which have an id of\n    // the current product item that we are intended to remove. and store the remaining products in the newState variable.\n    // and then if the length of newState is greater than 0(if we have at least one remaining product) then update the cart by assigning the value of newState variable.  \n    case REMOVE_FROM_CART:\n      let newState = state.cart.filter((product) => {\n        return product._id !== action._id;\n      });\n\n      return {\n        // Copy the whole state\n\n        ...state,\n        // if the length of newState is greater than 0, we have a product item on the cart then cartOpen is true and we can open it unless otherwise it is false then it is closed.\n        cartOpen: newState.length > 0,\n        cart: newState,\n      };\n\n    // If the reducer action type is CLEAR_CART it will clear all products from the cart.\n    case CLEAR_CART:\n      return {\n        // Copy the whole state\n\n        ...state,\n        cartOpen: false,\n        cart: [],\n      };\n\n    // If the reducer action type is TOGGLE_CART it will open or close the cart accordingly.\n    case TOGGLE_CART:\n      return {\n        // Copy the whole state\n\n        ...state,\n        cartOpen: !state.cartOpen,\n      };\n\n    // If the reducer action type is UPDATE_CATEGORIES it will update the categories from the array of categories in iterable way.\n\n    case UPDATE_CATEGORIES:\n      return {\n        // Copy the whole state\n\n        ...state,\n        categories: [...action.categories],\n      };\n\n    // If the reducer action type is UPDATE_CURRENT_CATEGORY it will update the current category.\n\n    case UPDATE_CURRENT_CATEGORY:\n      return {\n        // Copy the whole state\n\n        ...state,\n        currentCategory: action.currentCategory,\n      };\n    // TODO: Add a comment describing what the default case is for\n    // If this reducer doesn't recognize the action type, or doesn't\n    // care about this specific action, return the existing state unchanged\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","import { createStore } from 'redux';\nimport reducer from './reducers';\n\nexport default createStore(reducer);","// import React from 'react';\n// import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\n// import {\n//   ApolloClient,\n//   InMemoryCache,\n//   ApolloProvider,\n//   createHttpLink,\n// } from '@apollo/client';\n// import { setContext } from '@apollo/client/link/context';\n\n// import Home from './pages/Home';\n// import Detail from './pages/Detail';\n// import NoMatch from './pages/NoMatch';\n// import Login from './pages/Login';\n// import Signup from './pages/Signup';\n// import Nav from './components/Nav';\n// import { StoreProvider } from './utils/GlobalState';\n// import Success from './pages/Success';\n// import OrderHistory from './pages/OrderHistory';\n\n// const httpLink = createHttpLink({\n//   uri: '/graphql',\n// });\n\n// const authLink = setContext((_, { headers }) => {\n//   const token = localStorage.getItem('id_token');\n//   return {\n//     headers: {\n//       ...headers,\n//       authorization: token ? `Bearer ${token}` : '',\n//     },\n//   };\n// });\n\n// const client = new ApolloClient({\n//   link: authLink.concat(httpLink),\n//   cache: new InMemoryCache(),\n// });\n\n// function App() {\n//   return (\n//     <ApolloProvider client={client}>\n//       <Router>\n//         <div>\n//           <StoreProvider>\n//             <Nav />\n//             <Routes>\n//               <Route \n//                 path=\"/\" \n//                 element={<Home />} \n//               />\n//               <Route \n//                 path=\"/login\" \n//                 element={<Login />} \n//               />\n//               <Route \n//                 path=\"/signup\" \n//                 element={<Signup />} \n//               />\n//               <Route \n//                 path=\"/success\" \n//                 element={<Success />} \n//               />\n//               <Route \n//                 path=\"/orderHistory\" \n//                 element={<OrderHistory />} \n//               />\n//               <Route \n//                 path=\"/products/:id\" \n//                 element={<Detail />} \n//               />\n//               <Route \n//                 path=\"*\" \n//                 element={<NoMatch />} \n//               />\n//             </Routes>\n//           </StoreProvider>\n//         </div>\n//       </Router>\n//     </ApolloProvider>\n//   );\n// }\n\n// export default App;\nimport React from 'react';\nimport { BrowserRouter as Router, Route, Routes  } from 'react-router-dom';\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  createHttpLink,\n} from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\n\nimport Home from './pages/Home';\nimport Detail from './pages/Detail';\nimport NoMatch from './pages/NoMatch';\nimport Login from './pages/Login';\nimport Signup from './pages/Signup';\nimport Success from './pages/Success';\nimport Nav from './components/Nav';\nimport OrderHistory from './pages/OrderHistory';\nimport { Provider } from 'react-redux';\nimport store from './utils/store';\n\nconst httpLink = createHttpLink({\n  uri: '/graphql',\n});\n\nconst authLink = setContext((_, { headers }) => {\n  const token = localStorage.getItem('id_token');\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : '',\n    },\n  };\n});\n\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <div>\n          <Provider store={store}>\n            <Nav />\n            <Routes>\n              <Route exact path='/'element={<Home/>} />\n              <Route exact path='/login' element={<Login/>} />\n              <Route exact path='/signup' element={<Signup/>} />\n              <Route exact path='/orderHistory' element={<OrderHistory/>} />\n              <Route exact path='/products/:id' element={<Detail/>} />\n              <Route exact path='/success' element={<Success/>} />\n              <Route path=\"*\" element={<NoMatch/>} />\n            </Routes>\n          </Provider>\n        </div>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (\n    process.env.NODE_ENV === 'production' &&\n    'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}